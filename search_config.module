<?php

/*
 * Helper function for the installation of the module
 */

function search_config_get_roles_by_permission($permission) {
  return db_select('role_permission', 'p')
            ->fields('p', array('rid'))
            ->condition('permission', $permission)
            ->execute()
            ->fetchCol();
}

/**
 * Helper function to get the settings.
 */
function search_config_node_settings() {
  $settings = \Drupal::config('search_config.settings')->get('settings');
  $settings += array(
    'forms' => array(),
    'fields' => array(),
    'restrictions' => array(),
    'results' => array(),
  );

  $settings['forms'] += array(
    'toggle_forms' => 0,            // Show adv if both forms are present
    'move_keyword_search' => 0,     // Move keyword search into adv form
    'advanced_populate' => 0,       // Try and repopulate the adv form
    'advanced_expand' => 'default', // Control the presentation of adv form
    // Controls all 3 'Containing...' fields.
    'remove_containing_wrapper' => 'default',
  );
  $settings['fields'] += array(
    'containing_any' => array(),
    'containing_phrase' => array(),
    'containing_none' => array(),
    'types' => array(),
    'category' => array(),
    'language' => array(),
  );
  $settings['results'] += array(
    'limit' => '10',
  );
  $settings['restrictions'] += array(
    'admin_bypass' => 1,
    'remove_advanced' => 0,
  );

  foreach ($settings['fields'] as $field => $info) {
    $settings['fields'][$field] += array(
      'remove' => 0,                  // Hides the field
      'roles' => array()              // Readds it if role selected
    );
    if ($field == 'types') {
      $settings['fields'][$field] += array(
        'filter' => array(),          // Content type to HIDE
        'groupings' => array(),       // Combine type filters into groupings
      );
    }
    // @todo: What features do we need here?
    if ($field == 'category') {
      $settings['fields'][$field] += array(
        'filter' => array(),          // Vocabs to HIDE
        'widget' => 'textfield',      // Autocomplete?
      );
    }
  }
  return $settings;
}

/**
 * Implements hook_permission()
 */
function search_config_permission() {
  $permissions = array(
    'admin node search exlusions' => array(
      'title' => t('Exlude nodes from search results'),
      'description' => t('This allows users with this permission to flag content as not to be searched.'),
      ),
    'search all content' => array(
      'title' => t('Search all content types'),
      'description' => t('Allow users to search any content, overriding content type permissions.'),
      ),
    'search all exluded entities' => array(
      'title' => t('Search exluded content'),
      'description' => t('Allow users to search any content, overriding individual content item exlusion settings.'),
      ),
    );

  foreach (search_config_content_types() as $type => $label) {
    $permissions["search $type content"] = array(
      'title' => t('%type_name: Search content of this type', array('%type_name' => $label)),
      );
  }
  return $permissions;
}

/**
 * Helper function to get an array of safe to use content type names 
 */
function search_config_content_types()  {
  return array_map('check_plain', node_type_get_names());
}

/**
 * Helper function to get the settings
 */
function search_config_string_overrides($key = NULL) {
  $overrides = \Drupal::config('search_config.settings')->get('search_config_string_overrides');
  $overrides += array(
    'labels' => array(
      'basic' => '',
      'basic_with_keys' => '',
      'basic_submit' => '',
      'advanced_fieldset' => '',
      'advanced_fieldset_with_keys' => '',
      'advanced_any' => '',
      'advanced_phrase' => '',
      'advanced_none' => '',
      'advanced_type' => '',
      'advanced_language' => '',
      'advanced_submit' => '',
    ),
    'title_display' => array(
      'basic' => 'default',
      'advanced_any' => 'default',
      'advanced_phrase' => 'default',
      'advanced_none' => 'default',
      'advanced_type' => 'default',
      'advanced_language' => 'default',
    ),
    'menu' => array(
      'node' => '',
      'user' => '',
    ),
  );
  if (isset($key)) {
    return array_filter($overrides[$key]);
  }
  return $overrides;
}

/**
 * Implement hook_theme()
 */
function search_config_theme()  {
  return array(
    'search_config_admin_label_form' => array(
      'render element' => 'form',
      'template' => 'templates/ '
      ),
    );
}

/**
 * Implements hook_node_search_results().
 *
 * The only reason for this hook is to record if there are any active
 * search results found.
 */
function search_config_node_search_result($node) {
  global $search_config_node_results;
  $search_config_node_results [$node->nid] = $node->nid;
}