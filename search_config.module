<?php

/*
 * Helper function for the installation of the module
 */
use Drupal\Core\Session\AccountInterface;
function search_config_get_roles_by_permission($permission) {
    foreach (array(AccountInterface::ANONYMOUS_ROLE, AccountInterface::AUTHENTICATED_ROLE) as $rid) {
                return $rid->hasPermission($permission);
   }
}

/**
 * Helper function to get the settings.
 */
function search_config_node_settings() {
  $settings = \Drupal::config('search_config.settings')->get('settings');
  $settings += array(
    'forms' => array(),
    'fields' => array(),
    'restrictions' => array(),
    'results' => array(),
  );

  $settings['forms'] += array(
    'toggle_forms' => 0,            // Show adv if both forms are present
    'move_keyword_search' => 0,     // Move keyword search into adv form
    'advanced_populate' => 0,       // Try and repopulate the adv form
    'advanced_expand' => 'default', // Control the presentation of adv form
    // Controls all 3 'Containing...' fields.
    'remove_containing_wrapper' => 'default',
  );
  $settings['fields'] += array(
    'containing_any' => array(),
    'containing_phrase' => array(),
    'containing_none' => array(),
    'types' => array(),
    'category' => array(),
    'language' => array(),
  );
  $settings['results'] += array(
    'limit' => '10',
  );
  $settings['restrictions'] += array(
    'admin_bypass' => 1,
    'remove_advanced' => 0,
  );

  foreach ($settings['fields'] as $field => $info) {
    $settings['fields'][$field] += array(
      'remove' => 0,                  // Hides the field
      'roles' => array()              // Readds it if role selected
    );
    if ($field == 'types') {
      $settings['fields'][$field] += array(
        'filter' => array(),          // Content type to HIDE
        'groupings' => array(),       // Combine type filters into groupings
      );
    }
    // @todo: What features do we need here?
    if ($field == 'category') {
      $settings['fields'][$field] += array(
        'filter' => array(),          // Vocabs to HIDE
        'widget' => 'textfield',      // Autocomplete?
      );
    }
  }
  return $settings;
}

/**
 * Helper function to get an array of safe to use content type names 
 */
use Drupal\Component\Utility;
function search_config_content_types()  {
  return array_map('Html::escape', node_type_get_names());
}

/**
 * Helper function to get the settings
 */
function search_config_string_overrides($key = NULL) {
  $overrides = \Drupal::config('search_config.stringoverrides')->get('search_config_string_overrides');
  $overrides += array(
    'labels' => array(
      'basic' => '',
      'basic_with_keys' => '',
      'basic_submit' => '',
      'advanced_fieldset' => '',
      'advanced_fieldset_with_keys' => '',
      'advanced_any' => '',
      'advanced_phrase' => '',
      'advanced_none' => '',
      'advanced_type' => '',
      'advanced_language' => '',
      'advanced_submit' => '',
    ),
    'title_display' => array(
      'basic' => 'default',
      'advanced_any' => 'default',
      'advanced_phrase' => 'default',
      'advanced_none' => 'default',
      'advanced_type' => 'default',
      'advanced_language' => 'default',
    ),
    'menu' => array(
      'node' => '',
      'user' => '',
    ),
  );
  if (isset($key)) {
    return array_filter($overrides[$key]);
  }
  return $overrides;
}

/**
 * Implement hook_theme()
 */
function search_config_theme()  {
  return array(
    'search_config_admin_label_form' => array(
      'render element' => 'form',
      'template' => 'templates/search-config-admin-labels-form.html.twig',
      ),
    );
}

/**
 * Implements hook_node_search_results().
 *
 * The only reason for this hook is to record if there are any active
 * search results found.
 */
use Drupal\node\NodeInterface;
function search_config_node_search_result(NodeInterface $node) {
  global $search_config_node_results;
  $search_config_node_results [$node->id()] = $node->id();
}

/**
 * Implements of hook_query_node_access_alter().
 */
use Drupal\Core\Database\Query\SelectInterface;
use \Drupal\Core\Database\Query\Condition;
 function search_config_query_node_access_alter(SelectInterface $query) {
  $user = \Drupal::currentUser();
  if ($user->id() == 1) {
    return;
  }
  $search = FALSE;
  $node = FALSE;
  foreach ( $query->getTables() as $alias => $table) {
    if ($table['table'] == 'search_index') {
      $search = $alias;
    }
    elseif ($table['table'] == 'node') {
      $node = $alias;
    }
  }

  if ($node && $search) {
      if ($user->id() != 1) {
          if (!\Drupal::currentUser()->hasPermission('search all content')) {
              $excluded_content_types = array();
              foreach (search_config_content_types() as $type => $label) {
                  if (!\Drupal::currentUser()->hasPermission("search $type content")) {
                      $excluded_content_types[] = $type;
                  }
              }

              // A core bug results in a DB error if we use the following: Ref: #1210072
              // $query->condition($node . '.type', array($excluded_content_types), 'NOT IN');
              if (!empty($excluded_content_types)) {
                  $db_and = new Condition('AND');
                  foreach ($excluded_content_types as $type) {
                      $db_and->condition($node . '.type', $type, '!=');
                  }
                  $query->condition($db_and);
              }
          }

          if (!\Drupal::currentUser()->hasPermission('search all excluded entities')) {
              // Join into the {} table to see if it is excluded.
              $query->leftJoin('search_config_exclude', 'sc', $node . '.nid = sc.entity_id AND sc.entity_type = :type', array(':type' => 'node'));
              $query->isNull('sc.entity_id');
          }
      }

    if (get_class($query) == 'PagerDefault' || is_subclass_of($query, 'PagerDefault')) {
      $settings = search_config_node_settings();
      if (!empty($settings['results']['limit'])) {
        $query->range($settings['results']['limit']);
      }
    }
  }
}

/**
 * Implements of hook_form_FORM_alter().
 */
function search_config_form_search_form_alter(&$form, $form_state) {
  // Update the node search form.
  if (isset($form['module']['#value']) && $form['module']['#value'] == 'node') {
    module_load_include('inc', 'search_config', 'search_config.node');
    _search_config_set_string_overrides($form, $form_state);
    if (isset($form['advanced'])) {
      $settings = search_config_node_settings();
      if (!empty($settings['restrictions']['remove_advanced'])) {
        $form['advanced']['#access'] = FALSE;
      }
      else {
        _search_config_advanced_form($form, $form_state);
      }
    }
  }
}

/**
 * Helper function to test the users configured access rights to a field.
 */
function search_config_get_access($remove, $grant) {
  $user = \Drupal::currentUser();
  if ($remove) {
    return (bool) array_intersect_key($user->getRoles(), array_filter($grant));
  }
  return TRUE;
}

/**
 * Implements hook_form_FORM_alter()
 */
function search_config_form_search_admin_settings_alter(&$form, $form_state) {
  module_load_include('inc', 'search_config', 'search_config.admin');
  _search_config_form_search_admin_settings_alter($form, $form_state);
  $form['#submit'][] = 'search_config_search_admin_settings_alter';
}

/**
 * Additional submit handler to save the additional fields added by the form alter.
 */
function search_config_search_admin_settings_alter(&$form, &$form_state) {
  \Drupal::configFactory()->getEditable('search_config.settings')->set('search_config_string_overrides', $form_state['values']['search_config_string_overrides'])->save();
  \Drupal::configFactory()->getEditable('search_config.node_content_settings')->set('search_config', $form_state['values']['content_node_search_config']);
}

/*
 * Implements hook_form_BASE_FORM_ID_alter().
 */
/**
 * @param $form
 * @param $form_state
 */function search_config_form_node_form_alter(&$form, $form_state) {
    if (!\Drupal::currentUser()->hasPermission('admin node search exlusions')) {
        return;
    }

    $node = $form['#node'];
    $default_value = 0;
    $db = \Drupal::database();
    $query = 'SELECT 1 FROM {search_config_exclude} WHERE entity_id = :id AND entity_type = :type';
    if (!empty($node->nid)) {
        $default_value = (int) $db->queryRange($query, 0, 1, array(':id' => $node->nid, ':type' => 'node'))->fetchField();
    }
    $element = array(
        '#type' => 'checkbox',
        '#title' => t('Exclude from search'),
        '#default_value' => $default_value,
    );

    // Align with normal publishing options if possible.
    if (\Drupal::currentUser()->hasPermission('administer nodes')) {
        $form['options']['search_config_exclude'] = $element;
    }
    else {
        $form['search_config_exclude'] = $element;
        // Pushes the element to sit just above the vertical tabs.
        if (!empty($form['additional_settings']['#weight'])) {
            $form['search_config_exclude']['#weight'] = $form['additional_settings']['#weight'] - 1;
        }
    }
}

/**
 * Implements hook_node_insert().
 */
function search_config_node_insert(\Drupal\node\NodeInterface $node) {
    if (!empty($node->search_config_exclude)) {
        $record = array(
            'entity_type' => 'node',
            'entity_id' => $node->id(),
            'exclude' => 1,
        );
        Drupal::database()->insert('search_config_exclude')->fields($record)->execute();
    }
}

/*
 * Implements hook_node_update()
 */
function search_config_node_update(\Drupal\node\NodeInterface $node) {
    if (isset($node->search_config_exclude)) {
        $db = Drupal::database();
        $db->delete('search_config_exclude')->condition('entity_id', $node->id())->condition('entity_type', 'node')->execute();
        search_config_node_insert($node);
    }
}
